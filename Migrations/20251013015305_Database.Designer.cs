// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopPC.Data;

#nullable disable

namespace ShopPC.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251013015305_Database")]
    partial class Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ShopPC.Models.Account", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ShopPC.Models.Attributes", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubCategoryid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("attributeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("categoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.HasIndex("SubCategoryid");

                    b.HasIndex("categoryId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ShopPC.Models.Brand", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("brandName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("categoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("ShopPC.Models.Cart", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("accountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("productId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("accountId");

                    b.HasIndex("productId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("ShopPC.Models.Category", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("iconImg")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ShopPC.Models.Notification", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("accountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("accountId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ShopPC.Models.Order", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("accountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("totalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("id");

                    b.HasIndex("accountId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ShopPC.Models.OrderDetail", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("orderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("productId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("unitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("id");

                    b.HasIndex("orderId");

                    b.HasIndex("productId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("ShopPC.Models.PaymentLogs", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("orderId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("transactionId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("PaymentLogs");
                });

            modelBuilder.Entity("ShopPC.Models.Permission", b =>
                {
                    b.Property<string>("permissionName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("permissionName");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ShopPC.Models.ProductAttribute", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("attributeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("productId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("attributeId");

                    b.HasIndex("productId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("ShopPC.Models.ProductImg", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("imgUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("productId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.HasIndex("productId");

                    b.ToTable("ProductImg");
                });

            modelBuilder.Entity("ShopPC.Models.Products", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("brandId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("categoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("stockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("subCategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("thumbnail")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("brandId");

                    b.HasIndex("categoryId");

                    b.HasIndex("subCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ShopPC.Models.Role", b =>
                {
                    b.Property<string>("roleName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Accountid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("roleName");

                    b.HasIndex("Accountid");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ShopPC.Models.RolePermission", b =>
                {
                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PermissionName")
                        .HasColumnType("varchar(255)");

                    b.HasKey("RoleName", "PermissionName");

                    b.HasIndex("PermissionName");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ShopPC.Models.SubCategory", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("categoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("subCategoryImg")
                        .HasColumnType("longtext");

                    b.Property<string>("subCategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("ShopPC.Models.Attributes", b =>
                {
                    b.HasOne("ShopPC.Models.SubCategory", null)
                        .WithMany("attributes")
                        .HasForeignKey("SubCategoryid");

                    b.HasOne("ShopPC.Models.Category", "category")
                        .WithMany("attributes")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("ShopPC.Models.Brand", b =>
                {
                    b.HasOne("ShopPC.Models.Category", "category")
                        .WithMany("brands")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("ShopPC.Models.Cart", b =>
                {
                    b.HasOne("ShopPC.Models.Account", "account")
                        .WithMany("carts")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopPC.Models.Products", "product")
                        .WithMany("carts")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");

                    b.Navigation("product");
                });

            modelBuilder.Entity("ShopPC.Models.Notification", b =>
                {
                    b.HasOne("ShopPC.Models.Account", "account")
                        .WithMany("notifications")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("ShopPC.Models.Order", b =>
                {
                    b.HasOne("ShopPC.Models.Account", "account")
                        .WithMany("orders")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("ShopPC.Models.OrderDetail", b =>
                {
                    b.HasOne("ShopPC.Models.Order", "order")
                        .WithMany("orderDetails")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopPC.Models.Products", "product")
                        .WithMany("orderDetails")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("ShopPC.Models.ProductAttribute", b =>
                {
                    b.HasOne("ShopPC.Models.Attributes", "attribute")
                        .WithMany("productAttributes")
                        .HasForeignKey("attributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopPC.Models.Products", "product")
                        .WithMany("productAttributes")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("attribute");

                    b.Navigation("product");
                });

            modelBuilder.Entity("ShopPC.Models.ProductImg", b =>
                {
                    b.HasOne("ShopPC.Models.Products", "product")
                        .WithMany("productImgs")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("ShopPC.Models.Products", b =>
                {
                    b.HasOne("ShopPC.Models.Brand", "brand")
                        .WithMany("products")
                        .HasForeignKey("brandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopPC.Models.Category", "category")
                        .WithMany("products")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopPC.Models.SubCategory", "subCategory")
                        .WithMany("products")
                        .HasForeignKey("subCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("brand");

                    b.Navigation("category");

                    b.Navigation("subCategory");
                });

            modelBuilder.Entity("ShopPC.Models.Role", b =>
                {
                    b.HasOne("ShopPC.Models.Account", null)
                        .WithMany("roles")
                        .HasForeignKey("Accountid");
                });

            modelBuilder.Entity("ShopPC.Models.RolePermission", b =>
                {
                    b.HasOne("ShopPC.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopPC.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ShopPC.Models.SubCategory", b =>
                {
                    b.HasOne("ShopPC.Models.Category", "category")
                        .WithMany("subCategories")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("ShopPC.Models.Account", b =>
                {
                    b.Navigation("carts");

                    b.Navigation("notifications");

                    b.Navigation("orders");

                    b.Navigation("roles");
                });

            modelBuilder.Entity("ShopPC.Models.Attributes", b =>
                {
                    b.Navigation("productAttributes");
                });

            modelBuilder.Entity("ShopPC.Models.Brand", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("ShopPC.Models.Category", b =>
                {
                    b.Navigation("attributes");

                    b.Navigation("brands");

                    b.Navigation("products");

                    b.Navigation("subCategories");
                });

            modelBuilder.Entity("ShopPC.Models.Order", b =>
                {
                    b.Navigation("orderDetails");
                });

            modelBuilder.Entity("ShopPC.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ShopPC.Models.Products", b =>
                {
                    b.Navigation("carts");

                    b.Navigation("orderDetails");

                    b.Navigation("productAttributes");

                    b.Navigation("productImgs");
                });

            modelBuilder.Entity("ShopPC.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ShopPC.Models.SubCategory", b =>
                {
                    b.Navigation("attributes");

                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}
